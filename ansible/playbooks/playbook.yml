---
# playbook, який виконує встановлення та налаштування потокової реплікації PostgreSQL

# Встановлення PostgreSQL на всіх серверах
- name: Install PostgreSQL on all servers
  hosts: all_servers
  become: yes
  roles:
    - ../roles/postgresql

# Налаштування PRIMARY-сервера (основного)
- name: Configure primary PostgreSQL server
  hosts: primary
  become: yes
  roles:
    - ../roles/replication_primary

# Налаштування REPLICA-сервера (репліки)
- name: Configure replica PostgreSQL server
  hosts: replica
  become: yes
  roles:
    - ../roles/replication_replica

# Перевірка роботи потокової реплікації на PRIMARY-сервері
- name: Verify streaming replication
  hosts: primary
  become: yes
  become_user: postgres # Виконання запитів від імені користувача PostgreSQL
  tasks:
    - name: Check WAL sender status
      postgresql_query:
        db: postgres
        query: "SELECT client_addr, state FROM pg_stat_replication;"
      register: replication_status # Зберігання результату запиту у змінну

    - name: Debug WAL sender status
      debug:
        var: replication_status

    - name: Show replication status
      debug:
        msg: "Streaming replication is {{ 'ACTIVE' if replication_status.query_result | length > 0 else 'NOT WORKING' }}"

# Перевірка стану репліки
- name: Verify streaming replication on replica
  hosts: replica
  become: yes
  become_user: postgres # Виконання запитів від імені користувача PostgreSQL
  tasks:
    - name: Check if replica is in recovery mode
      postgresql_query:
        db: postgres
        query: "SELECT pg_is_in_recovery();"
      register: recovery_status # Результат перевірки

    - name: Show replica recovery state
      debug:
        msg: "Replica is in recovery mode: {{ recovery_status.query_result[0]['pg_is_in_recovery'] }}" # Виведення `true`, якщо репліка працює у режимі read-only

    # Тестування потокової реплікації шляхом вставки даних у PRIMARY-сервер
    - name: Insert test data on primary
      run_once: yes
      delegate_to: "{{ groups['primary'][0] }}" # Виконання задачі на основному сервері
      postgresql_query:
        db: example_db
        query: >
          INSERT INTO example_table (name, description)
          VALUES ('streaming_test', 'Streaming replication test')
          RETURNING id;
      register: insert_result
      ignore_errors: yes

    # Очікування синхронізації реплікації (декілька секунд)
    - name: Wait for replication to sync (brief pause)
      pause:
        seconds: 5

    # Перевірка, чи дані з'явилися на репліці
    - name: Query replica for test data
      postgresql_query:
        db: example_db
        query: "SELECT COUNT(*) FROM example_table WHERE name = 'streaming_test';"
      register: replica_query # Збереження результату запиту

    # Виведення статусу реплікації
    - name: Show streaming replication status
      debug:
        msg: "Found {{ replica_query.query_result[0]['count'] }} matching rows on replica. Streaming Replication {{ 'SUCCESSFUL' if replica_query.query_result[0]['count'] | int > 0 else 'FAILED' }}"

# Вставка тестового запису до таблиці на primary-сервері
- name: Insert test row into example_table on primary
  hosts: primary
  become: yes
  become_user: postgres
  tasks:
    # Вставка нового рядка у таблицю `example_table`
    - name: Insert row for logical replication test
      postgresql_query:
        db: example_db
        query: >
          INSERT INTO example_table (name, description)
          VALUES ('logical_test', 'Logical replication test')
          RETURNING id;
      register: logical_test_insert
    # Виведення ID вставленого рядка
    - name: Show inserted row ID
      debug:
        var: logical_test_insert

# Перевірка на replica-сервері, чи логічна реплікація спрацювала
- name: Check if logical replication delivered the test row
  hosts: replica
  become: yes
  become_user: postgres
  tasks:
    - name: Wait a bit for logical replication
      pause:
        seconds: 5
    # Запит до репліки — чи з’явився тестовий рядок
    - name: Query logical replica for test row
      postgresql_query:
        db: example_db_replica
        port: 5433
        query: "SELECT COUNT(*) FROM example_table WHERE name = 'logical_test';"
      register: logical_replica_result
    # Виведення результату — чи логічна реплікація спрацювала
    - name: Show logical replication status
      debug:
        msg: "Logical Replication {{ 'SUCCESSFUL' if logical_replica_result.query_result[0]['count'] | int > 0 else 'FAILED' }}"
