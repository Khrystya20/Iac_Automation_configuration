---
# Налаштування PostgreSQL на основному сервері (Primary)

# Надання дозволу PostgreSQL слухати всі мережеві інтерфейси
- name: Configure PostgreSQL to listen on all interfaces
  lineinfile:
    path: /etc/postgresql/{{ pg_version.stdout }}/main/postgresql.conf
    regexp: '^#?listen_addresses ='
    line: "listen_addresses = '*'"
  notify: restart postgresql

# Налаштування параметрів конфігурації для потокової реплікації
- name: Modify postgresql.conf for streaming replication
  lineinfile:
    path: /etc/postgresql/{{ pg_version.stdout }}/main/postgresql.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^#?wal_level =', line: "wal_level = replica" }
    - { regexp: '^#?max_wal_senders =', line: "max_wal_senders = 10" }
    - { regexp: '^#?max_replication_slots =', line: "max_replication_slots = 10" }
  notify: restart postgresql

# Додавання записів в pg_hba.conf для дозволу підключень від репліки
- name: Allow remote access in pg_hba.conf
  lineinfile:
    path: /etc/postgresql/{{ pg_version.stdout }}/main/pg_hba.conf
    line: "{{ item }}"
    insertafter: EOF
  loop:
    - "host    all             all             0.0.0.0/0               md5"
    - "host    replication     replicator      {{ private_replica_ip }}/32  md5"
    - "host    all             all             {{ private_primary_ip }}/32   md5"
    - "host    all             all             127.0.0.1/32             md5"
  notify: restart postgresql

# Відкрити порт PostgreSQL у фаєрволі
- name: Open PostgreSQL port 5432 in UFW
  ufw:
    rule: allow
    port: "5432"
    proto: tcp
  notify: restart postgresql

# Перевірка, що служба PostgreSQL запущена і включена при старті системи
- name: Ensure PostgreSQL service is enabled and started
  service:
    name: postgresql
    enabled: yes
    state: started

# Очікувати, поки сокет PostgreSQL буде доступний
- name: Ensure PostgreSQL is up and running
  wait_for:
    path: /var/run/postgresql/.s.PGSQL.5432
    timeout: 60

# Створення користувача для потокової реплікації
- name: Create replication user
  become: yes
  become_user: postgres
  postgresql_user:
    name: replicator
    password: replication_password
    role_attr_flags: REPLICATION,LOGIN
    state: present
    login_unix_socket: "/var/run/postgresql"

# Створення прикладу бази даних
- name: Create example database
  become: yes
  become_user: postgres
  postgresql_db:
    name: example_db
    owner: postgres
    state: present

# Створення таблиці в базі даних
- name: Create example table
  become: yes
  become_user: postgres
  postgresql_query:
    db: example_db
    query: >
      CREATE TABLE IF NOT EXISTS example_table (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

# Додавання записів до таблиці
- name: Insert sample data
  become: yes
  become_user: postgres
  postgresql_query:
    db: example_db
    query: >
      INSERT INTO example_table (name, description)
      VALUES
        ('item1', 'First test item'),
        ('item2', 'Second test item'),
        ('item3', 'Third test item')
      ON CONFLICT (id) DO NOTHING;

# Налаштування логічного рівня wal_level для логічної реплікації
- name: Configure wal_level for logical replication
  lineinfile:
    path: /etc/postgresql/{{ pg_version.stdout }}/main/postgresql.conf
    regexp: '^#?wal_level ='
    line: 'wal_level = logical'
  notify: restart postgresql

# Створення користувача, який має право підписуватися на publication
- name: Create logical replication user
  become: yes
  become_user: postgres
  postgresql_user:
    name: logical_replicator
    password: logical_replication_pw
    role_attr_flags: REPLICATION,LOGIN
    state: present
    login_unix_socket: "/var/run/postgresql"

# Дозвіл підключення логічного реплікатора через pg_hba.conf
- name: Allow logical replication user in pg_hba.conf
  lineinfile:
    path: /etc/postgresql/{{ pg_version.stdout }}/main/pg_hba.conf
    line: "host all logical_replicator {{ private_replica_ip }}/32 md5"
    insertafter: EOF
  notify: restart postgresql

# Перевірка, чи вже існує publication з назвою 'example_publication'
- name: Check if publication already exists
  become: yes
  become_user: postgres
  postgresql_query:
    db: example_db
    query: "SELECT COUNT(*) FROM pg_publication WHERE pubname = 'example_publication';"
  register: publication_check

# Створення publication, яка включає таблицю для логічної реплікації
- name: Create publication for logical replication if not exists
  become: yes
  become_user: postgres
  postgresql_query:
    db: example_db
    query: "CREATE PUBLICATION example_publication FOR TABLE example_table;"
  when: publication_check.query_result[0].count | int == 0

# Надання прав логічному реплікатору на читання таблиці для логічної реплікації
- name: Grant privileges to logical replicator
  become: yes
  become_user: postgres
  postgresql_query:
    db: example_db
    query: "GRANT SELECT ON example_table TO logical_replicator;"

# Виклик обробника, якщо були зміни
- name: Add handler to restart PostgreSQL
  meta: flush_handlers